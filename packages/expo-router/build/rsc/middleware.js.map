{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../../src/rsc/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// This module is bundled with Metro in web/react-server mode and redirects to platform specific renderers.\nimport type { RenderRscArgs } from '@expo/server/build/middleware/rsc';\nimport path from 'node:path';\n\nconst debug = require('debug')('expo:server:rsc-renderer');\n\nimport { renderRsc } from './rsc-renderer';\n\n// Tracking the implementation in expo/cli's MetroBundlerDevServer\nconst rscRenderContext = new Map<string, any>();\n\nfunction getRscRenderContext(platform: string) {\n  // NOTE(EvanBacon): We memoize this now that there's a persistent server storage cache for Server Actions.\n  if (rscRenderContext.has(platform)) {\n    return rscRenderContext.get(platform)!;\n  }\n\n  const context = {};\n\n  rscRenderContext.set(platform, context);\n  return context;\n}\n\nfunction getServerActionManifest(\n  distFolder: string,\n  platform: string\n): Record<\n  // Input ID\n  string,\n  [\n    // Metro ID\n    string,\n    // Chunk location.\n    string,\n  ]\n> {\n  const filePath = path.join(distFolder, `_expo/rsc/${platform}/action-manifest.json`);\n  // @ts-expect-error: Special syntax for expo/metro to access `require`\n  return $$require_external(filePath);\n}\n\nfunction getSSRManifest(\n  distFolder: string,\n  platform: string\n): Record<\n  // Input ID\n  string,\n  [\n    // Metro ID\n    string,\n    // Chunk location.\n    string,\n  ]\n> {\n  const filePath = path.join(distFolder, `_expo/rsc/${platform}/ssr-manifest.json`);\n  // @ts-expect-error: Special syntax for expo/metro to access `require`\n  return $$require_external(filePath);\n}\n\n// The import map allows us to use external modules from different bundling contexts.\ntype ImportMap = {\n  router: () => Promise<typeof import('./router/expo-definedRouter')>;\n};\n\nexport async function renderRscWithImportsAsync(\n  distFolder: string,\n  imports: ImportMap,\n  { body, platform, searchParams, config, method, input, contentType }: RenderRscArgs\n): Promise<ReadableStream<any>> {\n  if (method === 'POST' && !body) {\n    throw new Error('Server request must be provided when method is POST (server actions)');\n  }\n\n  const context = getRscRenderContext(platform);\n\n  const entries = await imports.router();\n\n  const ssrManifest = getSSRManifest(distFolder, platform);\n  const actionManifest = getServerActionManifest(distFolder, platform);\n  return renderRsc(\n    {\n      body: body ?? undefined,\n      searchParams,\n      context,\n      config,\n      input,\n      contentType,\n    },\n    {\n      isExporting: true,\n\n      resolveClientEntry(file: string, isServer: boolean) {\n        debug('resolveClientEntry', file, { isServer });\n\n        if (isServer) {\n          if (!(file in actionManifest)) {\n            throw new Error(`Could not find file in server action manifest: ${file}`);\n          }\n\n          const [id, chunk] = actionManifest[file];\n          return {\n            // TODO\n            id: id,\n            chunks: chunk ? [chunk] : [],\n          };\n        }\n\n        if (!(file in ssrManifest)) {\n          throw new Error(`Could not find file in SSR manifest: ${file}`);\n        }\n\n        const [id, chunk] = ssrManifest[file];\n        return {\n          id,\n          chunks: chunk ? [chunk] : [],\n        };\n      },\n      async loadServerModuleRsc(file) {\n        debug('loadServerModuleRsc', file);\n        // @ts-expect-error\n        return $$require_external(path.join(__dirname, '../../..', file));\n      },\n\n      entries: entries!,\n    }\n  );\n}\n\nexport async function renderRscAsync(\n  distFolder: string,\n  args: RenderRscArgs\n): Promise<ReadableStream<any>> {\n  const platform = args.platform;\n  return renderRscWithImportsAsync(\n    distFolder,\n    {\n      router: () => {\n        const filePath = path.join(distFolder, `_expo/rsc/${platform}/router.js`);\n        // @ts-expect-error: Special syntax for expo/metro to access `require`\n        return $$require_external(filePath);\n      },\n    },\n    args\n  );\n}\n"]}