{"version":3,"file":"BackgroundTaskRepository.js","sourceRoot":"","sources":["../src/BackgroundTaskRepository.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,2CAA2C,CAAC;AAQrE,MAAM,mBAAmB,GAAG,2BAA2B,CAAC;AACxD,MAAM,cAAc,GAAG,CAAC,cAAsB,EAAE,EAAE,CAAC,GAAG,mBAAmB,IAAI,cAAc,EAAE,CAAC;AAE9F,MAAM,4BAA4B,GAAG,oCAAoC,CAAC;AAC1E,MAAM,iBAAiB,GAAG,CAAC,cAAsB,EAAE,EAAE,CACnD,GAAG,4BAA4B,IAAI,cAAc,EAAE,CAAC;AAEtD,MAAM,mCAAmC,GAAG,2CAA2C,CAAC;AAExF,MAAM,wBAAwB,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,4BAA4B;AAEtE,cAAc;AACd;;;;KAIK;AACL,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IACxC,OAAO,CAAC,IAAI,CACV,sGAAsG,CACvG,CAAC;IACF,MAAM,aAAa,GAAG,MAAM,iBAAiB,EAAE,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;IAE3E,sEAAsE;IACtE,yEAAyE;IAEzE,IAAI,aAAa,EAAE;QACjB,KAAK,MAAM,UAAU,IAAI,aAAa,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,qDAAqD,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACnF,MAAM,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1D,MAAM,YAAY,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;SAC9D;QACD,OAAO,CAAC,GAAG,CAAC,iEAAiE,CAAC,CAAC;QAC/E,iBAAiB,CAAC,EAAE,CAAC,CAAC;KACvB;AACH,CAAC,CAAC;AAEF,cAAc;AACd;;;;KAIK;AACL,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,cAAsB,EAAE,OAA8B,EAAE,EAAE;IAC7F,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IAC3E,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACzD,MAAM,KAAK,CACT,sFAAsF,CACvF,CAAC;KACH;IAED,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC3C,MAAM,KAAK,CAAC,oEAAoE,CAAC,CAAC;KACnF;IAED,mBAAmB;IACnB,MAAM,QAAQ,GAAuB;QACnC,eAAe,EAAE,wBAAwB;QACzC,GAAG,OAAO;QACV,cAAc;KACf,CAAC;IAEF,kBAAkB;IAClB,MAAM,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrF,OAAO,CAAC,GAAG,CAAC,mDAAmD,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE/E,6BAA6B;IAC7B,MAAM,cAAc,GAAG,CAAC,GAAG,CAAC,MAAM,iBAAiB,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;IACxE,MAAM,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACxC,OAAO,cAAc,CAAC,MAAM,CAAC;AAC/B,CAAC,CAAC;AAEF,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EACjC,cAAsB,EACtB,WAAkC,EAClC,EAAE;IACF,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC;IACxF,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACzD,MAAM,KAAK,CACT,4FAA4F,CAC7F,CAAC;KACH;IAED,IAAI,CAAC,WAAW,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACnD,MAAM,KAAK,CAAC,gFAAgF,CAAC,CAAC;KAC/F;IAED,sBAAsB;IACtB,MAAM,WAAW,GAAG,CAAC,MAAM,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC5F,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAA4B,CAAC;IACnE,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAE1B,MAAM,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AACzF,CAAC,CAAC;AAEF,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,cAAsB,EAAE,EAAE;IAC7D,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACzD,MAAM,KAAK,CACT,sFAAsF,CACvF,CAAC;KACH;IAED,MAAM,WAAW,GAAG,CAAC,MAAM,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC5F,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAA4B,CAAC;AAC5D,CAAC,CAAC;AAEF,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,cAAsB,EAAE,EAAE;IAC7D,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IAC3E,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACzD,MAAM,KAAK,CACT,sFAAsF,CACvF,CAAC;KACH;IACD,qBAAqB;IACrB,MAAM,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;IAE9D,6BAA6B;IAC7B,MAAM,cAAc,GAAG,CAAC,MAAM,iBAAiB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,cAAc,CAAC,CAAC;IACzF,MAAM,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACxC,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IAC3E,OAAO,cAAc,CAAC,MAAM,CAAC;AAC/B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,cAAsB,EAAE,EAAE;IAC1D,IAAI,CAAC,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACzD,MAAM,KAAK,CACT,mFAAmF,CACpF,CAAC;KACH;IAED,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;IAC5E,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,IAAI,CAAC;KACb;IAED,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;AAElE;;GAEG;AACH,MAAM,iBAAiB,GAAG,KAAK,IAAI,EAAE;IACnC,MAAM,gBAAgB,GACpB,CAAC,MAAM,YAAY,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC,IAAI,IAAI,CAAC;IAC5E,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAa,CAAC;AAClD,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,iBAAiB,GAAG,KAAK,EAAE,WAAqB,EAAE,EAAE;IACxD,OAAO,CAAC,GAAG,CAAC,4CAA4C,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IAC3E,MAAM,YAAY,CAAC,OAAO,CAAC,mCAAmC,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;AAC/F,CAAC,CAAC","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport {\n  BackgroundTaskInfo,\n  BackgroundTaskOptions,\n  BackgroundTaskRunInfo,\n} from './BackgroundTask.types';\n\nconst TASK_INFO_STORE_KEY = 'expo-background-task-info';\nconst getTaskInfoKey = (taskIdentifier: string) => `${TASK_INFO_STORE_KEY}:${taskIdentifier}`;\n\nconst TASK_INFO_RUN_INFO_STORE_KEY = 'expo-background-task-info-run_info';\nconst getTaskRunInfoKey = (taskIdentifier: string) =>\n  `${TASK_INFO_RUN_INFO_STORE_KEY}:${taskIdentifier}`;\n\nconst TASK_INFO_IDENTIFIER_LIST_STORE_KEY = 'expo-background-task-info-identifier_list';\n\nconst DEFAULT_INTERVAL_MINUTES = 60 * 24; // 24 hours - once every day\n\n// @needsAudit\n/**\n * When creating a new task, we need to save the task info to the database.\n * @param taskIdentifier Identifier of the task\n * @param options Options for the task\n * */\nexport const cleanRepository = async () => {\n  console.info(\n    \"BackgroundTaskRepository.cleanRepository should only be called if you really know what you're doing.\"\n  );\n  const taskIdenfiers = await getIdentifierList();\n  console.log('BackgroundTaskRepository.cleanRepository', { taskIdenfiers });\n\n  //   await AsyncStorage.removeItem(getTaskInfoKey('background-task'));\n  //   await AsyncStorage.removeItem(getTaskRunInfoKey('background-task'));\n\n  if (taskIdenfiers) {\n    for (const identifier of taskIdenfiers) {\n      console.log('BackgroundTaskRepository.cleanRepository - deleting', { identifier });\n      await AsyncStorage.removeItem(getTaskInfoKey(identifier));\n      await AsyncStorage.removeItem(getTaskRunInfoKey(identifier));\n    }\n    console.log('BackgroundTaskRepository.cleanRepository - deleting identifiers');\n    setIdentifierList([]);\n  }\n};\n\n// @needsAudit\n/**\n * When creating a new task, we need to save the task info to the database.\n * @param taskIdentifier Identifier of the task\n * @param options Options for the task\n * */\nexport const createTaskInfo = async (taskIdentifier: string, options: BackgroundTaskOptions) => {\n  console.log('BackgroundTaskRepository.createTaskInfo', { taskIdentifier });\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.createTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  if (!options || typeof options !== 'object') {\n    throw Error(`BackgroundTask.saveTaskInfo: 'options' argument must be an object.`);\n  }\n\n  // Create task info\n  const taskInfo: BackgroundTaskInfo = {\n    intervalMinutes: DEFAULT_INTERVAL_MINUTES,\n    ...options,\n    taskIdentifier,\n  };\n\n  // Store task info\n  await AsyncStorage.setItem(getTaskInfoKey(taskIdentifier), JSON.stringify(taskInfo));\n  console.log('BackgroundTaskRepository.createTaskInfo - storing', { taskInfo });\n\n  // Update list of identifiers\n  const identifierList = [...(await getIdentifierList()), taskIdentifier];\n  await setIdentifierList(identifierList);\n  return identifierList.length;\n};\n\n// @needsAudit\n/**\n * Logs task info to the task repository\n * @param taskIdentifier Identifier to log\n * @param taskRunInfo Task run info to log\n */\nexport const addTaskInfoLog = async (\n  taskIdentifier: string,\n  taskRunInfo: BackgroundTaskRunInfo\n) => {\n  console.log('BackgroundTaskRepository.addTaskInfoLog', { taskIdentifier, taskRunInfo });\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.storeTaskInfoRunInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  if (!taskRunInfo || typeof taskRunInfo !== 'object') {\n    throw Error(`BackgroundTask.storeTaskInfoRunInfo: 'taskRunInfo' argument must be an object.`);\n  }\n\n  // Store task run info\n  const logListJson = (await AsyncStorage.getItem(getTaskRunInfoKey(taskIdentifier))) ?? '[]';\n  const logList = JSON.parse(logListJson) as BackgroundTaskRunInfo[];\n  logList.push(taskRunInfo);\n\n  await AsyncStorage.setItem(getTaskRunInfoKey(taskIdentifier), JSON.stringify(logList));\n};\n\n// @needsAudit\n/**\n * Returns the log for a task from the task repository\n * @param taskIdentifier\n * @returns Task run info log\n */\nexport const getTaskInfoLog = async (taskIdentifier: string) => {\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.getTaskInfoLog: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  const logListJson = (await AsyncStorage.getItem(getTaskRunInfoKey(taskIdentifier))) ?? '[]';\n  return JSON.parse(logListJson) as BackgroundTaskRunInfo[];\n};\n\n// @needsAudit\n/**\n * Cancels a scheduled task by its identifier\n * @param taskIdentifier Identifier of task to cancel\n * @returns Number of tasks left in the list\n */\nexport const deleteTaskInfo = async (taskIdentifier: string) => {\n  console.log('BackgroundTaskRepository.deleteTaskInfo', { taskIdentifier });\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.deleteTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n  // Delete from store!\n  await AsyncStorage.removeItem(getTaskInfoKey(taskIdentifier));\n\n  // Update list of identifiers\n  const identifierList = (await getIdentifierList()).filter((id) => id !== taskIdentifier);\n  await setIdentifierList(identifierList);\n  console.log('BackgroundTaskRepository.deleteTaskInfo', { identifierList });\n  return identifierList.length;\n};\n\n/**\n * Returns task info from the task repository\n * @param taskIdentifier Identifier of the task to get info for\n * @returns Task info or null if not found\n */\nexport const getTaskInfo = async (taskIdentifier: string) => {\n  if (!taskIdentifier || typeof taskIdentifier !== 'string') {\n    throw Error(\n      `BackgroundTask.getTaskInfo: 'taskIdentifier' argument must be a non-empty string.`\n    );\n  }\n\n  const taskInfo = await AsyncStorage.getItem(getTaskInfoKey(taskIdentifier));\n  if (!taskInfo) {\n    return null;\n  }\n\n  return JSON.parse(taskInfo);\n};\n\n/**\n * Returns all task identifiers stored in the task repository. This includes all tasks that are\n * scheduled to run or have been run for one-time tasks.\n */\nexport const getTaskIdentifiers = async () => getIdentifierList();\n\n/**\n * Internal accessor for getting the list of identifiers\n */\nconst getIdentifierList = async () => {\n  const identifiersValue =\n    (await AsyncStorage.getItem(TASK_INFO_IDENTIFIER_LIST_STORE_KEY)) ?? '[]';\n  return JSON.parse(identifiersValue) as string[];\n};\n\n/**\n *  Internal setter for the list of identifiers\n * @param identifiers List of identifiers\n */\nconst setIdentifierList = async (identifiers: string[]) => {\n  console.log('BackgroundTaskRepository.setIdentifierList', { identifiers });\n  await AsyncStorage.setItem(TASK_INFO_IDENTIFIER_LIST_STORE_KEY, JSON.stringify(identifiers));\n};\n"]}